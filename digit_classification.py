# -*- coding: utf-8 -*-
"""digit_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cKW3mbsNyEbrtKUXemQn_05xfEN7VqxM
"""

from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets, svm, metrics
from sklearn.model_selection import train_test_split
import PIL
from skimage import data, color
from skimage.transform import rescale, resize, downscale_local_mean
from skimage import transform

gamma_list = [0.01, 0.005, 0.001, 0.0005, 0.0001]
c_list = [0.1, 0.2, 0.5, 0.7, 1, 2, 5, 7, 10]

GAMMA = 0.001
c = 1.0
train_frac = 0.8
test_frac = 0.1
dev_frac = 0.1

digits = datasets.load_digits()

digits.images.shape

digits.images[0].reshape(1,8,8).shape

new_w = 64
new_h = 64

imageset1 = np.zeros((new_w, new_h)).reshape(1,new_w, new_h)

def resize(img, new_w, new_h):
    img = PIL.Image.fromarray(img.astype(np.int8), mode="L")
    return img.resize((new_w, new_h), resample=PIL.Image.BICUBIC)

for i,image in enumerate(digits.images):
  imageset1 = np.concatenate((imageset1,np.array(resize(digits.images[i], new_w, new_h)).reshape(1,new_w,new_h)), axis = 0)

n_samples1 = len(imageset1)
data1 = imageset1.reshape((n_samples1, -1))

clf = svm.SVC()

dev_test_frac = 1-train_frac
X_train, X_dev_test, y_train, y_dev_test = train_test_split(
    data1[1:], digits.target, test_size=dev_test_frac, shuffle=True
)

X_test, X_dev, y_test, y_dev = train_test_split(
    X_dev_test,y_dev_test, test_size=(dev_frac)/dev_test_frac, shuffle=True
)

h_param_comb = [{'gamma':g, 'C':c} for g in gamma_list for c in c_list]

best_acc = -1.0
best_mod = None
best_h_param = None

for h_params in h_param_comb:

        # Create a classifier: a support vector classifier
        clf = svm.SVC()

        hyper_params = h_params
        clf.set_params(**hyper_params)

        # Learn the digits on the train subset
        clf.fit(X_train, y_train)

        predicted_train = clf.predict(X_dev_test)
        predicted_dev = clf.predict(X_dev)
        predicted_test = clf.predict(X_test)

        accu = metrics.accuracy_score(y_pred = predicted_dev, y_true = y_dev)
        accu_test = metrics.accuracy_score(y_pred = predicted_test, y_true = y_test)
        accu_train = metrics.accuracy_score(y_pred = predicted_train, y_true = y_dev_test)

        if accu > best_acc:
            best_acc = accu
            best_mod = clf
            best_h_param  = h_params
            print("New best params:"+str(h_params))
            print("New best train accuracy:"+str(accu_train))
            print("New best dev accuracy:"+str(accu))
            print("New best test accuracy:"+str(accu_test))


        # Predict the value of the digit on the test subset
predicted = best_mod.predict(X_test)


print(
    f"Classification report for classifier {clf}:\n"
    f"{metrics.classification_report(y_test, predicted)}\n"
)

print("Best hyperparameters are:")
print(h_params)